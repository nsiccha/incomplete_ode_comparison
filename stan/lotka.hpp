
// Code generated by stanc v2.30.0
#include <stan/model/model_header.hpp>
namespace lotka_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 29> locations_array__ = 
{" (found before start of program)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 17, column 4 to column 24)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 18, column 4 to column 33)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 19, column 4 to column 33)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 20, column 4 to column 33)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 21, column 4 to column 33)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 24, column 10 to column 11)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 24, column 4 to column 29)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 25, column 4 to column 32)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 26, column 4 to column 26)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 27, column 4 to column 26)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 28, column 4 to column 26)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 29, column 4 to column 26)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 30, column 4 to column 81)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 32, column 8 to column 44)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 31, column 18 to line 33, column 5)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 31, column 4 to line 33, column 5)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 10, column 4 to column 17)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 11, column 4 to column 19)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 12, column 11 to column 12)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 12, column 4 to column 16)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 13, column 4 to column 12)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 14, column 12 to column 13)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 14, column 4 to column 15)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 3, column 8 to column 21)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 4, column 8 to column 44)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 5, column 8 to column 46)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 6, column 8 to column 18)",
 " (in '/home/niko/github/experiments/julia/comparison/stan/lotka.stan', line 2, column 73 to line 7, column 5)"};

struct ode_rhs_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__,
                       stan::promote_args_t<T5__>>, -1, 1>
  operator()(const T0__& t, const T1__& u, const T2__& p1, const T3__& p2,
             const T4__& p3, const T5__& p4, std::ostream* pstream__) const;
};
struct ode_rhs_odefunctor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__,
                       stan::promote_args_t<T5__>>, -1, 1>
  operator()(const T0__& t, const T1__& u, std::ostream* pstream__,
             const T2__& p1, const T3__& p2, const T4__& p3, const T5__& p4) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
  ode_rhs(const T0__& t, const T1__& u_arg__, const T2__& p1, const T3__& p2,
          const T4__& p3, const T5__& p4, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__,
                                 T4__, stan::promote_args_t<T5__>>;
    int current_statement__ = 0; 
    const auto& u = stan::math::to_ref(u_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> du =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 25;
      stan::model::assign(du,
        ((p1 * stan::model::rvalue(u, "u", stan::model::index_uni(1))) -
          ((p2 * stan::model::rvalue(u, "u", stan::model::index_uni(1))) *
            stan::model::rvalue(u, "u", stan::model::index_uni(2)))),
        "assigning variable du", stan::model::index_uni(1));
      current_statement__ = 26;
      stan::model::assign(du,
        ((-p3 * stan::model::rvalue(u, "u", stan::model::index_uni(2))) +
          ((p4 * stan::model::rvalue(u, "u", stan::model::index_uni(1))) *
            stan::model::rvalue(u, "u", stan::model::index_uni(2)))),
        "assigning variable du", stan::model::index_uni(2));
      current_statement__ = 27;
      return du;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
ode_rhs_functor__::operator()(const T0__& t, const T1__& u, const T2__& p1,
                              const T3__& p2, const T4__& p3, const T5__& p4,
                              std::ostream* pstream__)  const
{
  return ode_rhs(t, u, p1, p2, p3, p4, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
ode_rhs_odefunctor__::operator()(const T0__& t, const T1__& u,
                                 std::ostream* pstream__, const T2__& p1,
                                 const T3__& p2, const T4__& p3,
                                 const T5__& p4)  const
{
  return ode_rhs(t, u, p1, p2, p3, p4, pstream__);
}

 class lotka_model final : public model_base_crtp<lotka_model> {

 private:
  Eigen::Matrix<double, -1, 1> u0_data__;
  int T;
  std::vector<std::vector<double>> u;
  double t0;
  std::vector<double> ts; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u0{nullptr, 0};
 
 public:
  ~lotka_model() { }
  
  inline std::string model_name() const final { return "lotka_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.0", "stancflags = "};
  }
  
  
  lotka_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "lotka_model_namespace::lotka_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 17;
      context__.validate_dims("data initialization","u0","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      u0_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&u0) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u0_data__.data(), 2);
      
      {
        std::vector<local_scalar_t__> u0_flat__;
        current_statement__ = 17;
        u0_flat__ = context__.vals_r("u0");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 17;
          stan::model::assign(u0, u0_flat__[(pos__ - 1)],
            "assigning variable u0", stan::model::index_uni(sym1__));
          current_statement__ = 17;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 18;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      
      current_statement__ = 18;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("u", "T", T);
      current_statement__ = 20;
      context__.validate_dims("data initialization","u","double",
           std::vector<size_t>{static_cast<size_t>(T),
            static_cast<size_t>(2)});
      u = 
        std::vector<std::vector<double>>(T, 
          std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> u_flat__;
        current_statement__ = 20;
        u_flat__ = context__.vals_r("u");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 20;
            stan::model::assign(u, u_flat__[(pos__ - 1)],
              "assigning variable u", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 20;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 21;
      context__.validate_dims("data initialization","t0","double",
           std::vector<size_t>{});
      t0 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 21;
      t0 = context__.vals_r("t0")[(1 - 1)];
      current_statement__ = 22;
      stan::math::validate_non_negative_index("ts", "T", T);
      current_statement__ = 23;
      context__.validate_dims("data initialization","ts","double",
           std::vector<size_t>{static_cast<size_t>(T)});
      ts = std::vector<double>(T, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 23;
      ts = context__.vals_r("ts");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lotka_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ p1 = DUMMY_VAR__;
      current_statement__ = 2;
      p1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             0.5, 2.5, lp__);
      local_scalar_t__ p2 = DUMMY_VAR__;
      current_statement__ = 3;
      p2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             0.0, 2.0, lp__);
      local_scalar_t__ p3 = DUMMY_VAR__;
      current_statement__ = 4;
      p3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             1.0, 4.0, lp__);
      local_scalar_t__ p4 = DUMMY_VAR__;
      current_statement__ = 5;
      p4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             0.0, 2.0, lp__);
      {
        current_statement__ = 6;
        stan::math::validate_non_negative_index("u_hat", "T", T);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> u_hat =
           std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(T, 
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
        current_statement__ = 8;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(sigma, 2.0, 3.0));
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(p1, 1.5, 0.5));
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(p2, 1.2, 0.5));
        current_statement__ = 11;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(p3, 3.0, 0.5));
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(p4, 1.0, 0.5));
        current_statement__ = 13;
        stan::model::assign(u_hat,
          stan::math::ode_rk45_tol(ode_rhs_odefunctor__(), u0, t0, ts, 1e-3,
            1.0e-6, 100000, pstream__, p1, p2, p3, p4),
          "assigning variable u_hat");
        current_statement__ = 16;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 14;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(u, "u",
                stan::model::index_uni(t), stan::model::index_omni()),
              stan::model::rvalue(u_hat, "u_hat",
                stan::model::index_uni(t), stan::model::index_min_max(1, 2)),
              sigma));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lotka_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double p1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      p1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             0.5, 2.5, lp__);
      double p2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      p2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             0.0, 2.0, lp__);
      double p3 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      p3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             1.0, 4.0, lp__);
      double p4 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      p4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             0.0, 2.0, lp__);
      out__.write(sigma);
      out__.write(p1);
      out__.write(p2);
      out__.write(p3);
      out__.write(p4);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ p1 = DUMMY_VAR__;
      p1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0.5, 2.5, p1);
      local_scalar_t__ p2 = DUMMY_VAR__;
      p2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0.0, 2.0, p2);
      local_scalar_t__ p3 = DUMMY_VAR__;
      p3 = in__.read<local_scalar_t__>();
      out__.write_free_lub(1.0, 4.0, p3);
      local_scalar_t__ p4 = DUMMY_VAR__;
      p4 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0.0, 2.0, p4);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"sigma", "p1", "p2", "p3", "p4"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "p1");
    param_names__.emplace_back(std::string() + "p2");
    param_names__.emplace_back(std::string() + "p3");
    param_names__.emplace_back(std::string() + "p4");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "p1");
    param_names__.emplace_back(std::string() + "p2");
    param_names__.emplace_back(std::string() + "p3");
    param_names__.emplace_back(std::string() + "p4");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 5> names__{"sigma", "p1", "p2", "p3",
      "p4"};
      const std::array<Eigen::Index, 5> constrain_param_sizes__{1, 1, 
       1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = lotka_model_namespace::lotka_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return lotka_model_namespace::profiles__;
}

#endif


